Given head, the head of a linked list, determine if the linked list has a cycle in it.
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously 
following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer 
is connected to. Note that pos is not passed as a parameter.
Return true if there is a cycle in the linked list. Otherwise, return false.

Example1: 
Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

Example2:
Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.


Solution:
# Approach:
This is a classical problem known with many names (slow & fast pointer, tortoise and hare..). Here, we just need
to maintain two pointers s (depicting slow), f (depicting fast). s moves one step in every iteration while f moves
two steps. The idea is that if there exist a cycle in the list, s and f will eventually meet and thus you can return
your answer as true otherwise just check for NULL conditions and return false.

# Edge Case: If head is NULL or there is only 1 item in the list

class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head == NULL || head->next == NULL) return false;
        ListNode* s = head;
        ListNode* f = head;

        while(s->next != NULL && f->next != NULL && f->next->next != NULL){
            s = s->next;
            f = f->next->next;
            if(s == f)  return true;
        }
        return false;
    }
};
