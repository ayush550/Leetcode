You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.

Example 1:
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:
Input: list1 = [], list2 = [0]
Output: [0]

Solution:

# *********Approach********
Maintain two pointers head and tail, fix them on the list with smaller first value and keep moving the tail in the direction 
of smaller node values.
Edge Case: If one of the list is empty return the other list.
Edge Case: If one of the list becomes empty while traversing attach the remaining items from the other list at the end of your
new list.

# ********CODE***********

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {

        if(list1 == NULL) return list2;
        if(list2 == NULL) return list1;
        ListNode* head = NULL;
        ListNode* tail = NULL;

        if(list1->val <= list2->val){
          head = list1;
          tail = list1;
          list1 = list1->next;
        }else{
          head = list2;
          tail = list2;
          list2 = list2->next;
        }

        while(list1 != NULL && list2 != NULL){
          if(list1->val <= list2->val){
            tail->next = list1;
            tail = list1;
            list1 = list1->next;
          }else{
            tail->next = list2;
            tail = list2;
            list2 = list2->next;
          }
        }

        if(list1 != NULL) tail->next = list1;
        if(list2 != NULL) tail->next = list2;

        return head;
    }
};
