Problem:
We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.

Given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.

A subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.

 
Example 1:

Input: nums = [1,3,2,2,5,2,3,7]
Output: 5
Explanation: The longest harmonious subsequence is [3,2,2,2,3].
Example 2:

Input: nums = [1,2,3,4]
Output: 2
Example 3:

Input: nums = [1,1,1,1]
Output: 0


Approach:
The difference between resulting arrays' max and min number should not exceed 1
We can use hashmap to store the num, occurance/frequence of that num present in the original array
for example:
nums = [1,3,2,2,5,2,3,7]
after iterating over this array our resulting hashmap would look something like this:
key | Freq
1   ->  1
3   ->  2
2   ->  3
5   ->  1
7   ->  1

After this we can simply traverse this map and find the sum of map[key] + map[key-1] in case map[key-1] exists in our map

Time Complexity:
O(n) + O(n)
a) First iteration over the original array
b) Second iteration over the hashmap

Space Complexity:
O(n)
a) Using hashmap to store the num, freq(num)

___________________________________________
Code:
___________________________________________
class Solution {
public:
    int findLHS(vector<int>& nums) {
        unordered_map<int, int> mp;
        for(auto i: nums){
            mp[i]++;
        }

        int ans = 0;
        for(auto [k, v]: mp){
            if(mp.find(k-1) != mp.end())
                ans = max(ans, mp[k-1]+mp[k]);
        }
        return ans;
    }
};
