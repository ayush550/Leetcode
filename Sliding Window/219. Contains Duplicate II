Problem:
Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

Example 1:

Input: nums = [1,2,3,1], k = 3
Output: true
Example 2:

Input: nums = [1,0,1,1], k = 1
Output: true
Example 3:

Input: nums = [1,2,3,1,2,3], k = 2
Output: false

Approach:
We need to find a pair of two numbers such that the difference between the index position of their occurance
is less than or equal to k; more formally: nums[i] == nums[j] and abs(i - j) <= k
1. To do this we can maintain the character and its occurance while traversing over the array.
2. In case we find another occurace at some later point in time; It will be implicit that the index value of newly found occurance will be more than what is stored inside the map data-structure
3. Find the differece between if(index - map[stored_index] <= k) return true;

Time Complexity: O(n)
1. Traversing the array only once

Space Complexity: O(n)
1. Using unordered_map to store value, index pair
_____________________________
Code:
_____________________________
class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        unordered_map<int, int> mp; //value, index
        for(int i = 0; i<nums.size(); i++){
            if(mp.find(nums[i]) != mp.end()){
                if(i - mp[nums[i]] <= k){
                    return true;
                }
            }
            mp[nums[i]] = i; 
        }   
        return false;
    }
};
