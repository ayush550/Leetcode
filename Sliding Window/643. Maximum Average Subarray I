You are given an integer array nums consisting of n elements, and an integer k.

Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.


Example 1:

Input: nums = [1,12,-5,-6,50,3], k = 4
Output: 12.75000
Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75
Example 2:

Input: nums = [5], k = 1
Output: 5.00000


Approach:
Make a window of size k and calculate the average for this window
maintain a pointer at the start of the window; keep on adding one element in this window and delete the front element as the window moves
calculate the new average and update the maxAverage.

Time Complexity: O(n)
a) One iteration of the original array

Space Complexity: O(1)
a) No need to store any data other than few variables.

____________________________________
code:
____________________________________

class Solution {
public:
    double findMaxAverage(vector<int>& nums, int k) {
        double currSum = 0.0;
        double currAvg = 0.0, maxAvg = -1e5;
        for(int i = 0; i<k; i++){
            currSum += nums[i];
        }
        currAvg = currSum/k;
        maxAvg = max(maxAvg, currAvg);
        int j = 0, n = nums.size();
        for(int i = k; i<n; i++){  
            currSum = currSum - nums[j++] + nums[i];
            currAvg = currSum / k;
            maxAvg = max(maxAvg, currAvg);
        }
        return maxAvg;
    }
};
